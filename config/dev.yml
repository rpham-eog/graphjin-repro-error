app_name: "Demo"
host_port: 0.0.0.0:8080
web_ui: true

# Log levels: debug, error, warn, info
log_level: "debug"

# Log formats: json, plain
log_format: "plain"

# Enable or disable http compression (uses gzip)
http_compress: true

# enable or disable the server-timing http header
server_timing: true

# When production mode is 'true' only queries
# from the allow list are permitted.
production: false

# Throw a 401 on auth failure for queries that need auth
auth_fail_block: false

# Latency tracing for database queries and remote joins
# the resulting latency information is returned with the
# response
enable_tracing: true

# Watch the config folder and reload GraphJin
# with the new configs when a change is detected
reload_on_config_change: true

# Path pointing to where the migrations can be found
# this must be a relative path under the config path
# migrations_path: ./migrations

# Secret key for general encryption operations like
# encrypting the cursor data
secret_key: supercalifajalistics

# CORS: A list of origins a cross-domain request can be executed from.
# If the special * value is present in the list, all origins will be allowed.
# An origin may contain a wildcard (*) to replace 0 or more
# characters (i.e.: http://*.domain.com).
cors_allowed_origins: ["*"]

# CORS: A list of headers the client is allowed to use with cross-domain
# requests. If the special "*" value is present in the list, all headers will be
# allowed. Default value is ["Origin", "Accept", "Content-Type",
# "X-Requested-With", "Authorization"]. Even if the list is empty, the "Origin"
# is always appended to the list.
cors_allowed_headers: []

# Debug Cross Origin Resource Sharing requests
cors_debug: false

# Default limit value to be used on queries and as the max
# limit on all queries where a limit is defined as a query variable.
# Defaults to 20
default_limit: 20

# Disables all aggregation functions like count, sum, etc
disable_agg_functions: true

# Disables all functions like count, length, etc
disable_functions: true

# Enables using camel case terms in GraphQL which are converted
# to snake case in SQL
enable_camelcase: true

# Set session variable "user.id" to the user id
# Enable this if you need the user id in triggers, etc
# Note: This will not work with subscriptions
set_user_id: false


# Enable additional debugging logs
debug: true

# Poll the database to detect schema changes. GraphJin is reinitialized
# when a change is detected. Set to 0 to disable.
db_schema_poll_duration: 20s

# Auth related environment Variables
# GJ_AUTH_RAILS_COOKIE_SECRET_KEY_BASE
# GJ_AUTH_RAILS_REDIS_URL
# GJ_AUTH_RAILS_REDIS_PASSWORD
# GJ_AUTH_JWT_PUBLIC_KEY_FILE

auth:
  # Can be 'none', 'rails', 'jwt' or 'header'
  type: none

# Postgres related environment Variables
# GJ_DATABASE_HOST
# GJ_DATABASE_PORT
# GJ_DATABASE_USER
# GJ_DATABASE_PASSWORD

database:
  type: postgres
  host: localhost
  port: 5432
  dbname: dbname_test
  user: postgres
  password: postgres

  #schema: "public"
  #pool_size: 10
  #max_retries: 0
  #log_level: "debug"

  # database ping timeout is used for db health checking
  ping_timeout: 1m

  # Set up an secure tls encrypted db connection
  enable_tls: false

# Define additional variables here to be used with filters
variables:
  #admin_account_id: "5"
  # admin_account_id: "sql:select id from users where admin = true limit 1"

# Define variables set to values extracted from http headers
header_variables:
  remote_ip: "X-Forwarded-For"

# Field and table names that you wish to block
blocklist:
  - ar_internal_metadata
  - schema_migrations
  - secret
  - password
  - encrypted
  - token

